 Application Design Notes
General Subordination Ordering Application

Key Design Issues:
New functional requirements:
- FR(1) The ability to indicate that two or more cities are at the same level.
- FR(2) The ability to swap a group of cities that are all at the same level.
- FR(3) The ability to set a default level indicator.
— FR(4) The ability to select a default solution strategy.
— FR(5) The ability to swap a group of cities and a single city.
— FR(6) The ability to swap single cities.

Application Architectural Features
To support the new functional requirements, a new application architecture must be 
designed.  The new architecture must encapsulate the graphic display (canvas) in an
Javascript or jQuery object.

A structured interface between the ISM portion of the application and the pre-ISM 
process steps must be developed as well as an interface between the ISM and post-ISM 
process steps. The overall application will have three primary sections:
	Pre-ISM section
	ISM section
	Post-ISM section.

The Pre-ISM section is a good candidate for individual Web2py application.  This web
application would support NGT activities and provide a structured interface to a 
ISM web application.  A set of “user stories” will be prepared to support the development
of the application functional requirements.  Each user story will be used to create
a web page layout and set of test driven design functional tests.

The main application should address three questions:
	What data should the application store?
	Which pages should be presented to the visitors?
	How should the page content, for each page, be presented?

The application database models address the answer to the first question.
The application controllers address the answer to the second question.
The application views address the answer to the third question.


Functional Requirement One:
The new FR(1) functional requirement indicates a need to gather additional information.
In the strict subordination ordering (SSO) application the only question that was asked
was "is city a north-of city b."  If the answer was no, then it was clear that city b was
was north-of city a.  In the general subornation ordering application there is another
possibility, the cities could be at the same level.  In the general subornation ordering
application, if city a in not north-of city b the question "Are the cities at the same
level?", must be asked.  The answer to these two questions will completely define the 
state of the general subordination ordering between these two cities.

A new text box will need to be added to the usher interface to indicate if the cities 
are at the same level.

A new analysis approach will need to be developed to “swap a set of cities” that are all 
at the same level with a city that is at another level.

A new check box is needed to to indicate that the default “same level” setting is “no:
the cities are not at the same level.”

There are at least two different types of solution strategies:
- start with the first and second rows and work your way down
- select random cities to compare at first.. then work down 

These techniques will be documented as they are developed. 

The general development approach is:
— Create the new GUI elements [added same level check box]
- Create new functions, including:
—— Scan upper triangular area for ones
—- Create a known and unknown city array elements
—— Move more than one element at a time
—— Check for grouped elements
—— Add and remove elements from the known and unknown city arrays
- Create a test driven design approach
- Add new features 
- Test new features
- Create a set of functional approaches
- Evaluate each functional approach 
- Select best approach

The general subordination ordering can have a mix of ordering out comes. These outcomes
range from the case where all elements are at the same level to the case where each 
element is on a level by itself.

In the case where all of the cities are at the same level, all of the entries in the
matrix are zero (0), and there will be no information provided by the inference 
operation.  In the case where there is one city at each level, there is the potential 
for the lower triangular portion of the matrix to be all ones (1) and therefore 
providing the maximum inference potential.

In the case where there are small groups of cities (2 or 3) at the same level mixed with 
single cities at the same level, there is a potential for some inference information to 
be generated by the inference operation. A key design consideration is the techniques
used to process the relationships between the selected cities.  

If each city that is part of the empirical data collected occupies a level by itself
then the inference operation is the same as the BSMP inference operation.  However, if
the empirical data is associated with a city that occupies a level by itself and a city
that is part of of a group of cities all at the same level, then a new inference 
operation will need to be developed.  If the collected empirical data is associated 
with two cities, each of which is a member of different city groups at different levels
in the city matrix, then yet another new inference method will need to be developed.

There are four standard cases in the general subordination ordering approach.  These 
cases are:
— Each city on a level by itself
— All cities at the same level
— A group of cities at one level and singe cities on other levels
— Groups of cities at each level

The inference operations for these four cases will need to be developed.  
The case where we have each city on its own level has already been developed.
The case where all cities are at the same level will not have an inference
operation because no inference is possible with all cities at the same level.
The case where there are groups of cities and single cities needs needs a new 
inference method developed.  The case where there are groups of cities at each 
level needs to have a new inference method developed.

The first development activity will be focused on supporting the case where all
cities are at the same level.  The first step is to create a Sage Math notebook
that creates the known system configuration.  This configuration will be used 
to support testing of the GSO web application. The configuration will be very simple
as all the cities will be at the same level.  The matrix will be filled with all
zeros, but the background color will change from yellow to red as empirical
information is gathered to show that the cities are at the same level.  
This configuration can be completely determined using a number of empirical 
information events that is equal to the number of cities.  Should work out very fast.
The Sage Math notebook code should be very simple in this case.  The Javascript 
code will take longer as the background colors need to be properly addressed.
The web application needs to have two basic arrays added: an array of known
city associations and an array of unknown associations. The current plan is to 
create an array of arrays with the initial unknown array populated with each 
individual city in a single cell array.  The initial known city array will be 
empty.  As empirical data is collected of each city pair, the cities are 
transferred from the unknown array to the known array.  Need to write a set of 
function to process and manage the known and unknown array contents.

The second development activity will be focused on supporting the case where there
is one city at one level and a group of cities at the other level.  A Sage Math
notebook will need to be developed to create the known system configuration.  The 
known configuration will be used to support testing the GSO web application.  This
system configuration will be more challenging than the fist two configurations.  A
general approach will need to be developed and tested using the Sage Math tool before
the Javascript code is written. The concept of an array of known and unknown cities
will also be used in this effort. 

The third development activity will focus on supporting the case where there are a 
group of cities at different levels.  A Sage Math notebook will need to be prepared 
to create a known system configuration to support GSO system testing.  A Sage Math
notebook will be developed to explore solutions to this problem before the Javascript
code is written.

The fourth development activity will focus on integrating all of the previous mentioned 
cases into a general solution.  A Sage Math notebook will be prepared to create a 
known system configuration to support testing of the GSO system. A Sage Math notebook
will be developed to explore solutions to this type of problem before the Javascript
code is written.


Explore using jQuery and html markup to present the graphical grid.
Design a new application architectural outline and approach, to include:
— New graphical presentation
— Table based html grid
— Object based code that supports the new approach
— Clear object api interfaces 
— Create a test driven approach
— Explore a continuous integration approach
— Design new GUI interface using Bootstrap

DESIGN NOTE ONE — 07-06-14
For the general approach, the GUI needs to have a button that prepares the 
GUI to accept cities at the same level.  The number of cities at the same 
level can range from 2 to the total list.

Need to create to lists… known cities and unknown cities. The known cities
will be arranged in known groups of cities.

DESIGN NOTE TWO — 07-08-14
The graphic display needs to be made into an object.
Need to determine the best way to create the graphic object.
May use jQuery for the graphic object creation.
Create functions to process the graphic object.
Need a graphic processing object for each type of graphic transform.

DESIGN NOTE THREE - 07-11-14
Need to re-design the application structure.. 
First make the graphic display into an object..
Then create a set of transform functions to update the graphic object..

DESIGN NOTE FOUR — 07-19-14
Create a global application architecture with three sections:
	Pre-ISM section
	ISM section
	Post-ISM section.


DESIGN NOTE Five - 07-24-2014
Need to review and reorganize the design document
Started a new github repo for web2py repo.
Transition to working the Web2py examples
Focus on creating a wiki-like application to support NGT












